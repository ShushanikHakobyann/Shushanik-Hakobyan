#1-13
#include <stdio.h>

#define MAX_WORD_LENGTH 10
#define IN 1
#define OUT 0

int main() {
    int c, i, j, state, word_length;
    int word_lengths[MAX_WORD_LENGTH] = {0};
    
    state = OUT;
    word_length = 0;

    while ((c = getchar()) != EOF) {
        if (c == ' ' || c == '\n' || c == '\t') {
            if (state == IN) {
                if (word_length <= MAX_WORD_LENGTH) {
                    word_lengths[word_length - 1]++;
                }
                word_length = 0;
                state = OUT;
            }
        } else {
            state = IN;
            word_length++;
        }
    }

    int max_count = 0;
    for (i = 0; i < MAX_WORD_LENGTH; i++) {
        if (word_lengths[i] > max_count) {
            max_count = word_lengths[i];
        }
    }

    for (i = max_count; i > 0; i--) {
        for (j = 0; j < MAX_WORD_LENGTH; j++) {
            if (word_lengths[j] >= i) {
                printf(" * ");
            } else {
                printf("   ");
            }
        }
        printf("\n");
    }

    for (i = 1; i <= MAX_WORD_LENGTH; i++) {
        printf("%2d ", i);
    }
    printf("\n");

    return 0;
}


#1-17
#include <stdio.h>

#define MAXLINE 1000
#define LIMIT 80

int getline(char line[], int maxline);

int main() {
    char line[MAXLINE];
    int len;

    while ((len = getline(line, MAXLINE)) > 0) {
        if (len > LIMIT) {
            printf("%s", line);
        }
    }

    return 0;
}

int getline(char line[], int maxline) {
    int c, i;

    for (i = 0; i < maxline - 1 && (c = getchar()) != EOF && c != '\n'; ++i) {
        line[i] = c;
    }

    if (c == '\n') {
        line[i] = c;
        ++i;
    }

    line[i] = '\0';
    return i;
}


#1-19
#include <stdio.h>

#define MAX_LINE_LENGTH 1000

void reverse(char s[], int length) {
    int i, j;
    char temp;
    for (i = 0, j = length - 1; i < j; i++, j--) {
        temp = s[i];
        s[i] = s[j];
        s[j] = temp;
    }
}

int getline_custom(char line[], int max_length) {
    int c, i;
    for (i = 0; i < max_length - 1 && (c = getchar()) != EOF && c != '\n'; i++) {
        line[i] = c;
    }
    if (c == '\n') {
        line[i++] = c;
    }
    line[i] = '\0';
    return i;
}

int main() {
    char line[MAX_LINE_LENGTH];
    int length;

    while ((length = getline_custom(line, MAX_LINE_LENGTH)) > 0) {
        if (line[length - 1] == '\n') {
            length--;
        }
        reverse(line, length);
        printf("%s\n", line);
    }

    return 0;
}


#3-2
#include <stdio.h>

void escape(char s[], char t[]) {
    int i, j;
    i = j = 0;
    
    while (t[i] != '\0') {
        switch (t[i]) {
            case '\n':
                s[j++] = '\\';
                s[j++] = 'n';
                break;
            case '\t':
                s[j++] = '\\';
                s[j++] = 't';
                break;
            default:
                s[j++] = t[i];
                break;
        }
        i++;
    }
    s[j] = '\0';
}

void unescape(char s[], char t[]) {
    int i, j;
    i = j = 0;
    
    while (t[i] != '\0') {
        if (t[i] == '\\' && t[i + 1] != '\0') {
            switch (t[i + 1]) {
                case 'n':
                    s[j++] = '\n';
                    i++;
                    break;
                case 't':
                    s[j++] = '\t';
                    i++;
                    break;
                default:
                    s[j++] = t[i];
                    break;
            }
        } else {
            s[j++] = t[i];
        }
        i++;
    }
    s[j] = '\0';
}

int main() {
    char t[1000], s[1000];
    int c, i = 0;

    while ((c = getchar()) != EOF && i < 999) {
        t[i++] = c;
    }
    t[i] = '\0';

    escape(s, t);
    printf("Escaped: %s\n", s);

    unescape(t, s);
    printf("Unescaped: %s\n", t);

    return 0;
}

#3-3
#include <stdio.h>
#include <ctype.h>

void expand(char s1[], char s2[]) {
    int i, j;
    char start, end;
    i = j = 0;

    while (s1[i] != '\0') {
        if (s1[i] != '-' && s1[i + 1] == '-' && s1[i + 2] != '\0') {
            start = s1[i];
            end = s1[i + 2];
            if ((islower(start) && islower(end)) || (isupper(start) && isupper(end)) || (isdigit(start) && isdigit(end))) {
                while (start <= end) {
                    s2[j++] = start++;
                }
                i += 2;
            } else {
                s2[j++] = s1[i];
            }
        } else {
            s2[j++] = s1[i];
        }
        i++;
    }
    s2[j] = '\0';
}

int main() {
    char s1[1000], s2[1000];
    int c, i = 0;

    while ((c = getchar()) != EOF && i < 999) {
        s1[i++] = c;
    }
    s1[i] = '\0';

    expand(s1, s2);
    printf("Expanded: %s\n", s2);

    return 0;
}

#3-5
#include <stdio.h>

void reverse(char s[]) {
    int i, j;
    char temp;
    for (i = 0, j = strlen(s) - 1; i < j; i++, j--) {
        temp = s[i];
        s[i] = s[j];
        s[j] = temp;
    }
}

void itob(int n, char s[], int b) {
    int i = 0, sign;
    if ((sign = n) < 0) {
        n = -n;
    }

    do {
        int remainder = n % b;
        s[i++] = (remainder > 9) ? (remainder - 10 + 'A') : (remainder + '0');
    } while ((n /= b) > 0);

    if (sign < 0) {
        s[i++] = '-';
    }
    s[i] = '\0';

    reverse(s);
}

int main() {
    char s[100];
    int n = 255;
    int base = 16;

    itob(n, s, base);
    printf("Number: %d in base %d is: %s\n", n, base, s);

    return 0;
}


#Create a C program that checks whether user provided number
can be expressed as a sum of two Prime numbers, if yes then
show all possible combinations. Use functions in the
implementation.
#include <stdio.h>
#include <stdbool.h>

bool isPrime(int num) {
    if (num <= 1)
        return false;
    for (int i = 2; i <= num / 2; i++) {
        if (num % i == 0)
            return false;
    }
    return true;
}

void findPrimePairs(int num) {
    bool found = false;
    printf("Prime pairs that sum up to %d are:\n", num);

    for (int i = 2; i <= num / 2; i++) {
        int secondNum = num - i;
        if (isPrime(i) && isPrime(secondNum)) {
            printf("%d + %d = %d\n", i, secondNum, num);
            found = true;
        }
    }

    if (!found) {
        printf("No prime pairs found for %d.\n", num);
    }
}

int main() {
    int number;
    printf("Enter a number: ");
    scanf("%d", &number);
    findPrimePairs(number);
    return 0;
}


#Create a C calculator program that provides the operators ‘+’, ‘-’,
‘*’, ‘/’, ‘%’ and reads the expressions in the infix notation. After
calculating the expression result it should print result and allow
another expression to be entered by the user. The program should
exit when EOF is read.
#include <stdio.h>

int main() {
    int num1, num2;
    char operator;
    
    while (scanf("%d %c %d", &num1, &operator, &num2) != EOF) {
        switch (operator) {
            case '+':
                printf("%d\n", num1 + num2);
                break;
            case '-':
                printf("%d\n", num1 - num2);
                break;
            case '*':
                printf("%d\n", num1 * num2);
                break;
            case '/':
                if (num2 != 0)
                    printf("%d\n", num1 / num2);
                else
                    printf("Error: Division by zero\n");
                break;
            case '%':
                if (num2 != 0)
                    printf("%d\n", num1 % num2);
                else
                    printf("Error: Division by zero\n");
                break;
            default:
                printf("Error: Invalid operator\n");
                break;
        }
    }
    
    return 0;
}

#Write a C program that generates and prints a pyramid pattern of ‘*’
characters based on user input number of rows. The program should
take an integer as input (n) from the user and then generate a
pyramid pattern of n rows. Use functions to implement the pattern
generation.

#include <stdio.h>

void printPyramid(int rows) {
    for (int i = 1; i <= rows; i++) {
        for (int j = 1; j <= i; j++) {
            printf("* ");
        }
        printf("\n");
    }
}

int main() {
    int n;
    
    printf("Input number of rows: ");
    scanf("%d", &n);
    
    printPyramid(n);
    
    return 0;
}
