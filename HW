#1-13
#include <stdio.h>

#define MAX_WORD_LENGTH 10
#define IN 1
#define OUT 0

int main() {
    int c, i, j, state, word_length;
    int word_lengths[MAX_WORD_LENGTH] = {0};
    
    state = OUT;
    word_length = 0;

    while ((c = getchar()) != EOF) {
        if (c == ' ' || c == '\n' || c == '\t') {
            if (state == IN) {
                if (word_length <= MAX_WORD_LENGTH) {
                    word_lengths[word_length - 1]++;
                }
                word_length = 0;
                state = OUT;
            }
        } else {
            state = IN;
            word_length++;
        }
    }

    int max_count = 0;
    for (i = 0; i < MAX_WORD_LENGTH; i++) {
        if (word_lengths[i] > max_count) {
            max_count = word_lengths[i];
        }
    }

    for (i = max_count; i > 0; i--) {
        for (j = 0; j < MAX_WORD_LENGTH; j++) {
            if (word_lengths[j] >= i) {
                printf(" * ");
            } else {
                printf("   ");
            }
        }
        printf("\n");
    }

    for (i = 1; i <= MAX_WORD_LENGTH; i++) {
        printf("%2d ", i);
    }
    printf("\n");

    return 0;
}


#1-17
#include <stdio.h>

#define MAXLINE 1000
#define LIMIT 80

int getline(char line[], int maxline);

int main() {
    char line[MAXLINE];
    int len;

    while ((len = getline(line, MAXLINE)) > 0) {
        if (len > LIMIT) {
            printf("%s", line);
        }
    }

    return 0;
}

int getline(char line[], int maxline) {
    int c, i;

    for (i = 0; i < maxline - 1 && (c = getchar()) != EOF && c != '\n'; ++i) {
        line[i] = c;
    }

    if (c == '\n') {
        line[i] = c;
        ++i;
    }

    line[i] = '\0';
    return i;
}


#1-19
#include <stdio.h>

#define MAX_LINE_LENGTH 1000

void reverse(char s[], int length) {
    int i, j;
    char temp;
    for (i = 0, j = length - 1; i < j; i++, j--) {
        temp = s[i];
        s[i] = s[j];
        s[j] = temp;
    }
}

int getline_custom(char line[], int max_length) {
    int c, i;
    for (i = 0; i < max_length - 1 && (c = getchar()) != EOF && c != '\n'; i++) {
        line[i] = c;
    }
    if (c == '\n') {
        line[i++] = c;
    }
    line[i] = '\0';
    return i;
}

int main() {
    char line[MAX_LINE_LENGTH];
    int length;

    while ((length = getline_custom(line, MAX_LINE_LENGTH)) > 0) {
        if (line[length - 1] == '\n') {
            length--;
        }
        reverse(line, length);
        printf("%s\n", line);
    }

    return 0;
}


#3-2
#include <stdio.h>

void escape(char s[], char t[]) {
    int i, j;
    i = j = 0;
    
    while (t[i] != '\0') {
        switch (t[i]) {
            case '\n':
                s[j++] = '\\';
                s[j++] = 'n';
                break;
            case '\t':
                s[j++] = '\\';
                s[j++] = 't';
                break;
            default:
                s[j++] = t[i];
                break;
        }
        i++;
    }
    s[j] = '\0';
}

void unescape(char s[], char t[]) {
    int i, j;
    i = j = 0;
    
    while (t[i] != '\0') {
        if (t[i] == '\\' && t[i + 1] != '\0') {
            switch (t[i + 1]) {
                case 'n':
                    s[j++] = '\n';
                    i++;
                    break;
                case 't':
                    s[j++] = '\t';
                    i++;
                    break;
                default:
                    s[j++] = t[i];
                    break;
            }
        } else {
            s[j++] = t[i];
        }
        i++;
    }
    s[j] = '\0';
}

int main() {
    char t[1000], s[1000];
    int c, i = 0;

    while ((c = getchar()) != EOF && i < 999) {
        t[i++] = c;
    }
    t[i] = '\0';

    escape(s, t);
    printf("Escaped: %s\n", s);

    unescape(t, s);
    printf("Unescaped: %s\n", t);

    return 0;
}

#3-3
#include <stdio.h>
#include <ctype.h>

void expand(char s1[], char s2[]) {
    int i, j;
    char start, end;
    i = j = 0;

    while (s1[i] != '\0') {
        if (s1[i] != '-' && s1[i + 1] == '-' && s1[i + 2] != '\0') {
            start = s1[i];
            end = s1[i + 2];
            if ((islower(start) && islower(end)) || (isupper(start) && isupper(end)) || (isdigit(start) && isdigit(end))) {
                while (start <= end) {
                    s2[j++] = start++;
                }
                i += 2;
            } else {
                s2[j++] = s1[i];
            }
        } else {
            s2[j++] = s1[i];
        }
        i++;
    }
    s2[j] = '\0';
}

int main() {
    char s1[1000], s2[1000];
    int c, i = 0;

    while ((c = getchar()) != EOF && i < 999) {
        s1[i++] = c;
    }
    s1[i] = '\0';

    expand(s1, s2);
    printf("Expanded: %s\n", s2);

    return 0;
}

#3-5
#include <stdio.h>

void reverse(char s[]) {
    int i, j;
    char temp;
    for (i = 0, j = strlen(s) - 1; i < j; i++, j--) {
        temp = s[i];
        s[i] = s[j];
        s[j] = temp;
    }
}

void itob(int n, char s[], int b) {
    int i = 0, sign;
    if ((sign = n) < 0) {
        n = -n;
    }

    do {
        int remainder = n % b;
        s[i++] = (remainder > 9) ? (remainder - 10 + 'A') : (remainder + '0');
    } while ((n /= b) > 0);

    if (sign < 0) {
        s[i++] = '-';
    }
    s[i] = '\0';

    reverse(s);
}

int main() {
    char s[100];
    int n = 255;
    int base = 16;

    itob(n, s, base);
    printf("Number: %d in base %d is: %s\n", n, base, s);

    return 0;
}
